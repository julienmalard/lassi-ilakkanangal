import type {
  நிரல்மொழி_இலக்கணம்_வகை,
  நிரல்மொழி_மொழியாக்கம்_வகை,
} from "@/வகைகள்";
import type { default as ClientConstellation } from "@constl/ipa";
import { sort } from "semver";
import { மொழி_தகவல்கள், மொழி_மொழிபெயர்ப்புகள் } from "@/நிரல்மொழிகள்.js";

export class லஸ்ஸி_இலக்கணங்கள் {
  _இலக்கணங்கள்: { [நிரல்மொழி: string]: நிரல்மொழி_இலக்கணம்_வகை };
  _மொழிபெயர்ப்புகள்: { [நிரல்மொழி: string]: நிரல்மொழி_மொழியாக்கம்_வகை };

  விண்மீன்?: ClientConstellation;

  constructor({
    இலக்கணங்கள் = மொழி_தகவல்கள்,
    மொழிபெயர்ப்புகள் = மொழி_மொழிபெயர்ப்புகள்,
    விண்மீன்,
  }: {
    இலக்கணங்கள்?: { [நிரல்மொழி: string]: நிரல்மொழி_இலக்கணம்_வகை };
    மொழிபெயர்ப்புகள்?: { [நிரல்மொழி: string]: நிரல்மொழி_மொழியாக்கம்_வகை };
    விண்மீன்?: ClientConstellation;
  }) {
    this._இலக்கணங்கள் = இலக்கணங்கள்;
    this._மொழிபெயர்ப்புகள் = மொழிபெயர்ப்புகள்;
    this.விண்மீன் = விண்மீன்;
  }

  get இலக்கணங்கள்(): { [நிரல்மொழி: string]: நிரல்மொழி_இலக்கணம்_வகை } {
    return this._இலக்கணங்கள்;
  }

  get நிரல்மொழிகள்(): string[] {
    return Object.keys(this.இலக்கணங்கள்);
  }

  பதிப்பு_கண்டறி({ நிரல்மொழி }: { நிரல்மொழி: string }): string {
    return sort(Object.keys(this.இலக்கணங்கள்[நிரல்மொழி].பதிப்பு)).at(-1);
  }

  நிரல்மொழி_பெயர்({
    நிரல்மொழி,
    மொழி,
  }: {
    நிரல்மொழி: string;
    மொழி: string;
  }): string | undefined {
    return this._மொழிபெயர்ப்புகள்[நிரல்மொழி]?.பெயர்[மொழி];
  }

  விதிகள்({
    நிரல்மொழி,
    பதிப்பு,
  }: {
    நிரல்மொழி: string;
    பதிப்பு?: string;
  }): string[] | undefined {
    பதிப்பு = பதிப்பு || this.பதிப்பு_கண்டறி({ நிரல்மொழி });
    return this._மொழிபெயர்ப்புகள்[நிரல்மொழி]?.பதிப்புகள்[பதிப்பு];
  }

  விதி_மொழிபெயர்ப்பு({
    நிரல்மொழி,
    மொழி,
    விதி,
  }: {
    நிரல்மொழி: string;
    மொழி: string;
    விதி: string;
  }): string | undefined {
    if (this._மொழிபெயர்ப்புகள்[நிரல்மொழி]?.விதிகள்[விதி]?.தேவை === false) {
      return விதி;
    }
    return this._மொழிபெயர்ப்புகள்[நிரல்மொழி]?.விதிகள்[விதி]?.பெயர்ப்பு[மொழி];
  }

  நிறைவு({
    நிரல்மொழி,
    மொழி,
    பதிப்பு,
  }: {
    நிரல்மொழி: string;
    மொழி?: string;
    பதிப்பு?: string;
  }): number {
    if (!மொழி) {
      const மொழிகள் = this.இயற்கை_மொழிகள்({நிரல்மொழி});
      return மொழிகள்.map(மொ=>this.நிறைவு({நிரல்மொழி, மொழி: மொ, பதிப்பு})).reduce((இ, ஈ) => இ + ஈ) / மொழிகள்.length
    }
    if (மொழி === this.இலக்கணங்கள்[நிரல்மொழி].மொழி) {
      return 1;
    }
    பதிப்பு = பதிப்பு || this.பதிப்பு_கண்டறி({ நிரல்மொழி });
    const விதி_நிரல்மொழி = this.விதிகள்({ நிரல்மொழி, பதிப்பு });
    const _விதி_மொழிபெயர்ப்பு = விதி_நிரல்மொழி
      .map((இ) => this.விதி_மொழிபெயர்ப்பு({ நிரல்மொழி, மொழி, விதி: இ }))
      .filter((இ) => இ);
    return _விதி_மொழிபெயர்ப்பு.length / விதி_நிரல்மொழி.length;
  }

  இயற்கை_மொழிகள்({ நிரல்மொழி }: { நிரல்மொழி: string }): string[] {
    const மொழிகள் = Object.values(this._மொழிபெயர்ப்புகள்[நிரல்மொழி].விதிகள்)
      .map((இ) => Object.keys(இ.பெயர்ப்பு))
      .filter((இ) => இ.length);
    return [this.இலக்கணங்கள்[நிரல்மொழி].மொழி, ...new Set(மொழிகள்.flat())];
  }

  மூல்_மொழி({ நிரல்மொழி }: { நிரல்மொழி: string }): string | undefined {
    return this.இலக்கணங்கள்[நிரல்மொழி]?.மொழி;
  }

  மூல்_எண்ணுரு({ நிரல்மொழி }: { நிரல்மொழி: string }): string | undefined {
    return this.இலக்கணங்கள்[நிரல்மொழி]?.எண்ணுரு;
  }
}
